/*
 * Flockr Social Proof API
 * API for sending product user actions and retrieving social proof
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@flockr.co
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.62
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";

/**
* Image service.
* @module api/ImageApi
* @version 1.0.0
*/
export default class ImageApi {

    /**
    * Constructs a new ImageApi. 
    * @alias module:api/ImageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the image operation.
     * @callback moduleapi/ImageApi~imageCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns an image containing the social proof for the product, Note use https://flockr-cdn.com as the host in production
     * @param {String} apiKey your api key
     * @param {String} image URL Encoded path to the image to add/overlay social proof messages
     * @param {String} productId the unique ID of the product, must be the same ID as used in product visit
     * @param {String} visitorId A unique id for the visitor
     * @param {String} sessionId A unique id for the session
     * @param {Object} opts Optional parameters
     * @param {String} opts.host The host name or ip address
     * @param {String} opts.location the location of the messages in the site/app, e.g. \&quot;PLP\&quot;, \&quot;PDP\&quot;, \&quot;cart\&quot; etc.
     * @param {Boolean} opts.transparent If transparent is false (default), returns the input image with the social proof ovelayed, if no social proof values exist for the product a 301 redirect is returned. If transparent is true, returns a transparent image to the size of the input image with the social proof message, if no social proof values for the given product a 1x1px transparent image is returned.
     * @param {module:api/ImageApi~imageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    image(apiKey, image, productId, visitorId, sessionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling image");
      }
      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling image");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling image");
      }
      // verify the required parameter 'visitorId' is set
      if (visitorId === undefined || visitorId === null) {
        throw new Error("Missing the required parameter 'visitorId' when calling image");
      }
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling image");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
        'host': opts['host'],'image': image,'productId': productId,'visitorId': visitorId,'sessionId': sessionId,'location': opts['location'],'transparent': opts['transparent']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/webp'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/{apiKey}/image', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}